#!/usr/bin/php
<?php
require_once __DIR__ . '/include/aws.php';
require_once __DIR__ . '/include/functions.php';

function print_help() {
	print(
	"Usage: 

backup -v <VOLUME,[VOLUME...]>

Description: 

This program backups EBS volumes.

Options:

-v <VOLUME> ID of the volume (or a comma separated list) to backup.
-h          Prints this help.

");
}

set_time_limit( 0 );

$volumes            = array();
$return             = 0;
$start_time         = time();
$backup_description = 'Backup';
$backup_generator   = 'Backup Generator';
$snapshots_to_keep  = 2;

if ( ! empty( $argv ) ) {
	$count_argv = count( $argv );

	for ( $i = 1; $i < $count_argv; $i++ ) {
		switch ( $argv[ $i ] ) {
			case '-v':
				if ( $i < $count_argv - 1 ) {
					$volumes = explode( ',', $argv[ $i + 1 ] );

					$i++;
				}
				break;
			case '-h':
				print_help();

				die();
		}
	}
}

try {
	if ( empty( $volumes ) ) {
		throw new Exception( 'You must specify at least one volume to backup.' );
	}

	aws_init();

	foreach ( $volumes as $index => $volume ) {
		message( sprintf( 'Creating snapshot for volume %s...', $volume ) );

		/**
		 * We set a tag called 'Generator' to identify the snapshots
		 * generated by this process. In a few lines, you'll know why.
		 */
		create_snapshot( $volume, $backup_description, array( 
			'Generator' => $backup_generator,
		) );

		if ( $snapshots_to_keep ) {
			message( 'Getting old snapshots...' );

			$snapshots = get_snapshots( $volume );

			$backup_snapshots = array();

			/**
			 * We get the snapshots that were generated by this process
			 * in the past (that's why we use the Generator tag, so we
			 * can identify them, and not delete snapshots generated by
			 * some other process).
			 */
			foreach ( $snapshots as $snapshot ) {
				if ( isset( $snapshot['Tags'] ) ) {
					foreach ( $snapshot['Tags'] as $tag ) {
						if ( 'Generator' === $tag['Key'] &&
							$backup_generator === $tag['Value'] ) {
							$backup_snapshots[] = array(
								'id'         => $snapshot['SnapshotId'],
								'start_time' => strtotime( $snapshot['StartTime'] ),
							);
						}
					}
				}
			}

			/**
			 * We use the 'start_time' parameter to sort the snapshots
			 * from the older to the newer.
			 */
			usort( $backup_snapshots, function( $a, $b ) {
				return $a['start_time'] - $b['start_time'];
			} );

			/**
			 * We remove <snapshots_to_keep> snapshots from the array.
			 * Those will remain, the rest will be erased.
			 */
			array_splice( $backup_snapshots, $snapshots_to_keep * -1 );

			foreach ( $backup_snapshots as $snapshot) {
				message( sprintf( 'Deleting snapshot %s...', $snapshot['id'] ) );

				delete_snapshot( $snapshot['id'] );
			}
		}

		if ( $index !== count( $volumes ) - 1 ) {
			/**
			 * We must at least to wait 15 seconds for creating a next snapshot.
			 */
			message( 'Waiting 15 seconds for creating next snapshot...' );

			sleep( 15 );
		}
	}
} catch ( Exception $e ) {
	error( $e->getMessage() );

	$return = -1;
}

$elapsed_time = time() - $start_time;

message( sprintf(
	'Finished (Total time: %02d:%02d)',
	floor( $elapsed_time / 60 ),
	$elapsed_time % 60
) );

exit( $return );
